var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TradingAgents","category":"page"},{"location":"#TradingAgents","page":"Home","title":"TradingAgents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TradingAgents.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TradingAgents]","category":"page"},{"location":"#TradingAgents.AdaptiveMM_run-NTuple{4, Any}","page":"Home","title":"TradingAgents.AdaptiveMM_run","text":"AdaptiveMM_run(ticker::Int, parameters::Tuple{Float64, Int, Float64, Int, Int, Int},\n                init_conditions::Tuple{Float64, Int, Int, Int},\n                server_info::Tuple{String, String, String, String};\n                collect_data = false)\n\nSimulate adaptive market-making agent activity.\n\nArguments\n\nticker::Int: the ticker ID of the asset being traded by the Adaptive Market Maker\nparameters::Tuple{Float64, Int, Float64, Int, Int, Int}: a tuple of parameters for   specifying the Adaptive Market Maker's behavior. The tuple must be of the form   (η_ms, γ, δ_tol, inventory_limit, unit_trade_size, trade_freq), where\nη_ms::Float64: the market share target\nγ::Int: the risk aversion parameter\nδ_tol::Float64: the optimization tolerance\ninventory_limit::Int: the maximum and minimum number of share holdings allowed\nunit_trade_size::Int: the amount of shares behind each quote\ntrade_freq::Int: the number of seconds between each trading invocation\ninit_conditions::Tuple{Float64, Int, Int, Int}: a tuple of initial conditions for   the Adaptive Market Maker. The tuple must be of the form (init_cash, init_z,   num_init_quotes, num_init_rounds), where\ninit_cash::Float64: the initial cash balance\ninit_z::Int: the initial inventory\nnum_init_quotes::Int: the number of random quotes to send out per initialization   round\nnum_init_rounds::Int: the number of initialization rounds\nserver_info::Tuple{String, String, String, String}: a tuple of server information for   connecting to the brokerage/Exchange. The tuple is composed of the following elements:\nhost_ip_address::String: the IP address of the brokerage server\nport::String: the port number of the brokerage server\nusername::String: the username to be used for the brokerage account\npassword::String: the password to be used for the brokerage account\n\nKeywords\n\ncollect_data::Bool=false: whether or not to collect data during the simulation\n\n\n\n\n\n","category":"method"},{"location":"#TradingAgents.PLP_run-NTuple{4, Any}","page":"Home","title":"TradingAgents.PLP_run","text":"PLP_run(num_traders::Int, num_assets::Int,\n        parameters::Tuple{StepRangeLen{Float64}, StepRangeLen{Int}, Int, Int},\n        server_info::Tuple{String, String, String, String};\n        print_msg:Bool=false)\n\nSimulate zero-intelligence liquidity providers in parallel. To operate these agents in parallel, the Distributed package is used. This function must be called after addprocs(n) has been called, where n is the number of workers to be used.\n\nArguments\n\nnum_traders::Int: the number of liquidity providers to simulate\nnum_assets::Int: the number of available assets for the agents to trade\nparameters::Tuple{StepRangeLen{Float64}, StepRangeLen{Int}, Int, Int}: a tuple   of parameters for the simulation. The tuple is composed of the following elements:\ninit_cash_range::StepRangeLen{Float64}: the range of initial cash values for the   liquidity providers. E.g., init_cash_range = 10000.0:0.01:30000.0 defines a   possible cash balance anywhere between $10,000.00 and $30,000.00.\ninit_shares_range::StepRangeLen{Int}: the range of initial share holdings for the   liquidity providers. E.g., init_shares_range = 0:1:120 defines a possible share   holding (of each available asset) anywhere between 0 shares and 120 shares.\ntrade_freq::Int: the average number of seconds between trades for each liquidity   provider. E.g., trade_freq = 720 means that each liquidity provider will trade   approximately once every 720 seconds (12 minutes).\nnum_ids::Int: the number of reserved ids set aside for all other agents in the   simulation (e.g., liquidity takers and market makers)\nserver_info::Tuple{String, String, String, String}: a tuple of server information for   connecting to the brokerage. The tuple is composed of the following elements:\nhost_ip_address::String: the IP address of the brokerage server\nport::String: the port number of the brokerage server\nusername::String: the username to be used for the brokerage account\npassword::String: the password to be used for the brokerage account\n\nKeywords\n\nprint_msg::Bool=false: whether or not to print messages to the console\n\n\n\n\n\n","category":"method"},{"location":"#TradingAgents.PLT_run-NTuple{4, Any}","page":"Home","title":"TradingAgents.PLT_run","text":"PLT_run(num_traders::Int, num_assets::Int,\n        parameters::Tuple{String, String, StepRangeLen{Float64}, StepRangeLen{Int}, Int, Int},\n        server_info::Tuple{String, String};\n        print_msg:Bool=false)\n\nSimulate zero-intelligence liquidity takers in parallel. To operate these agents in parallel, the Distributed package is used. This function must be called after addprocs(n) has been called, where n is the number of workers to be used.\n\nArguments\n\nnum_traders::Int: the number of liquidity takers to simulate\nnum_assets::Int: the number of available assets for the agents to trade\nparameters::Tuple{String, String, StepRangeLen{Float64}, StepRangeLen{Int}, Int, Int}: a tuple   of parameters for the simulation. The tuple is composed of the following elements:\nusername::String: the username to be used for the brokerage account\npassword::String: the password to be used for the brokerage account\ninit_cash_range::StepRangeLen{Float64}: the range of initial cash values for the   liquidity takers. E.g., init_cash_range = 10000.0:0.01:30000.0 defines a   possible cash balance anywhere between $10,000.00 and $30,000.00.\ninit_shares_range::StepRangeLen{Int}: the range of initial share holdings for the   liquidity takers. E.g., init_shares_range = 0:1:120 defines a possible share   holding (of each available asset) anywhere between 0 shares and 120 shares.\ntrade_freq::Int: the average number of seconds between trades for each liquidity   taker. E.g., trade_freq = 720 means that each liquidity taker will trade   approximately once every 720 seconds (12 minutes).\nnum_MM::Int: the number of reserved ids set aside for non-brokerage users (e.g.,   market makers)\nserver_info::Tuple{String, String}: a tuple of server information for   connecting to the brokerage. The tuple is composed of the following elements:\nhost_ip_address::String: the IP address of the brokerage server\nport::String: the port number of the brokerage server\n\nKeywords\n\nprint_msg::Bool=false: whether or not to print messages to the console\n\n\n\n\n\n","category":"method"},{"location":"#TradingAgents.PMM_run-NTuple{4, Any}","page":"Home","title":"TradingAgents.PMM_run","text":"PMM_run(num_agents::Int, num_assets::Int,\n        parameters::Tuple{Float64, Float64, Int, Int},\n        server_info::Tuple{String, String, String, String};\n        collect_data::Bool=false, print_msg::Bool=false)\n\nSimulate random market-making agent activity in \"parallel\" (asynchronous tasks).\n\nArguments\n\nnum_agents::Int: the number of market-making agents to simulate\nnum_assets::Int: the number of available assets for the agents to trade\nparameters::Tuple{Float64, Float64, Int, Int}: a tuple of parameters for the simulation.   The tuple is composed of the following elements:\nϵ_min::Float64: the lower bound for the price deviation variable\nϵ_max::Float64: the upper bound for the price deviation variable\nunit_trade_size::Int: the amount of shares behind each quote\ntrade_freq::Int: the average number of seconds between trades\nserver_info::Tuple{String, String, String, String}: a tuple of server information for   connecting to the brokerage. The tuple is composed of the following elements:\nhost_ip_address::String: the IP address of the brokerage server\nport::String: the port number of the brokerage server\nusername::String: the agent username for the brokerage server\npassword::String: the agent password for the brokerage server\n\nKeywords\n\ncollect_data::Bool=false: whether or not to collect data from the simulation\nprint_msg::Bool=false: whether or not to print messages during the simulation\n\n\n\n\n\n","category":"method"}]
}
